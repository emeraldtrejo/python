#data inside dictionaries take the form of pairs of keys and values
#stored keys that are strings that point to integer values
file_counts = {"jpg":10, "txt":14, "csv":2, "py":23}
print(file_counts)
#to add to the dictonary
file_counts["cfg"] = 8
"jpg" in file_counts
True
#delete a dictonary
del file_counts["cfg"]


toc = {"Introduction":1, "Chapter 1":4, "Chapter 2":11, "Chapter 3":25, "Chapter 4":30}
toc["Epilogue"] = 39 # Epilogue starts on page 39
toc["Chapter 3"] = 24 # Chapter 3 now starts on page 24
print(toc) # What are the current contents of the dictionary?
print("Chapter 5" in toc)  # Is there a Chapter 5?

for ext, amount in file_counts.items():
  print("There are {} files with the .{} extension".format(amount, ext))
  
#methods for dictionaries
file_counts.keys()
file_counts.values()

for value in file_counts.values():
  print(value)
  
def count_letters(text):
  result = {}
  for letter in text:
    if letter not in result:
      result[letter] = 0
    result[letter] +=1
  return result
  
  count_letters("aaaaaa")
  
# print a line for each item of clothing with each color, for example: "red shirt", "blue shirt",  
wardrobe = {"shirt":["red","blue","white"], "jeans":["blue","black"]}
for clothing, colors in wardrobe.items():
	for color in colors:
		print("{} {}".format(color, clothing))


def email_list(domains):
	emails = []
	for domain, users in domains.items():
	  for user in users:
	    emails.append(user+ "@"+domain)
	return(emails)

print(email_list({"gmail.com": ["clark.kent", "diana.prince", "peter.parker"], "yahoo.com": ["barbara.gordon", "jean.grey"], "hotmail.com": ["bruce.wayne"]}))

#eturn a dictionary with the users as keys and a list of their groups as values.
def groups_per_user(group_dictionary):
	user_groups = {}
	# Go through group_dictionary
	for groups, users in group_dictionary.items():
		# Now go through the users in the group
		for user in users:
		  if user in user_groups:
		    user_groups[user].append(groups)
		  else:
		    user_groups[user] = [groups]
			# Now add the group to the the list of
# groups for this user, creating the entry
# in the dictionary if necessary

	return(user_groups)

print(groups_per_user({"local": ["admin", "userA"],
		"public":  ["admin", "userB"],
		"administrator": ["admin"] }))
